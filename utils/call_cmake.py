import shutil
import os, stat
import os.path
import argparse
from python.codal_utils import build

def copy_file_and_owner(src, dest):
    shutil.copy2(src, dest)
    st = os.stat(src)
    os.chown(dest, st[stat.ST_UID], st[stat.ST_GID])

def main():
    parser = argparse.ArgumentParser(description='Initiate a CMake build at <path>')
    parser.add_argument('path', metavar='PATH', type=str, nargs='?',
                        help='Path to CMake project to build. Project folder must \
                        contain CMakeLists. A separate build folder will be created')
    parser.add_argument('-f' , '--files-to-copy', dest="file_list", default="",
                        help='A CSV list of files to copy from the resulting build folder')
    parser.add_argument('-o' , '--output', dest="output_location",
                        help='The output location for files generated by the build.\
                        The files included will either be the build folder, or if \
                        specified, the files listed by -f.')
    parser.add_argument('-c' , '--clean', action='store_true',
                        help='Clean the cmake build folder before building.')


    args = parser.parse_args()
    if not args.path:
        print("A CMake project path must be supplied. Path should be relative to this script location or absolute.")
        exit(1)


    if "CMakeLists.txt" not in os.listdir(args.path):
        print("The given path does not contain a CMakeLists.txt; aborting.")
        exit(1)

    current_dir = os.getcwd()
    build_folder = args.path + "/build"
    print(current_dir)

    if not os.path.exists(build_folder):
        os.mkdir(build_folder)

    os.chdir(build_folder)

    build(args.clean, False)

    if args.output_location:
        out_path = args.output_location
        os.chdir(current_dir)

        if not os.path.exists(out_path):
            os.mkdir(out_path)

        built_files = os.listdir(build_folder)

        iter_files = built_files

        if len(args.file_list):
            files = args.file_list.split(",")
            iter_files = [f for f in files if f in built_files]

        for f in iter_files:
            copy_file_and_owner(build_folder + "/" + f, out_path + "/" + f)

if __name__ == "__main__":
    main()